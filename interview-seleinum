What are the types of automation testing?
What are some advantages of Selenium?

What are some features of Selenium 4?
The different features of Selenium 4 are-

It is W3C compliant. This makes the cross-browser tests more stable.
A new Selenium 4 IDE for both Chrome and Firefox is introduced.
The Selenium 4 IDE tests can be exported to desired programming languages – C#, Java, Javascript, etc.
The Selenium Grid feature is more user-friendly and comes with docker support (a set of platform-as-a-service products that use OS-level virtualization to deliver software in packages called containers).
Documentation is more detailed and improved in Selenium 4.

Can we test APIs or web services using Selenium Webdriver?
ANS: No. Selenium WebDriver uses the browser’s native method to automate web applications. So, there is no support for testing web services using Selenium WebDriver.

What are the various ways of locating an element in Selenium?
Id
XPath
CSS selector
className
tagName
name

What is an XPath?
Xpath or XML path is a query language that is used for selecting nodes from XML documents. Also, it is one of the locators supported by Selenium Webdriver.

What is the difference between a single slash(/) and a double slash(//) in XPath?
In XPath, a single slash is used for creating absolute XPaths, beginning from the root node. Whereas double slash is used for creating relative XPaths.

What is the syntax of finding elements by class using CSS Selector?
By using .className in the CSS locator, we can select all the elements belonging to a particular class e.g. ‘.red’ will select all elements having class ‘red’.

What is the syntax of finding elements by id using CSS Selector?
By using #idValue in the CSS locator, we can select all the elements belonging to a particular class e.g. ‘#userId’ will select the element having an id – userId.

How can we launch different browsers in Selenium WebDriver?

By creating an instance of the desired browser driver e.g. below command will initialize the Firefox browser.
WebDriver driver = new FirefoxDriver();

How can we type text in a textbox element using Selenium?
With the help of the sendKeys() method, we can type text in a textbox-

WebElement searchTextBox = driver.findElement(By.id("srch"));
searchTextBox.sendKeys("searchTerm");

How can we move to a particular frame in Selenium?
The driver.switchTo() command is used for switching to a particular iframe.
driver.switchTo().frame("{frameIndex/frameId/frameName}");
For locating a frame, we can either use the index (starting from 0), its name, or its Id.

How to delete cookies in Selenium?
Using deleteAllCookies() method.
driver.manage().deleteAllCookies();

What are some expected conditions in Explicit waits?
Some of the commonly used expected conditions of an element in explicit waits are-

elementToBeClickable(WebElement element or By locator)
stalenessOf(WebElement element)
visibilityOf(WebElement element)
visibilityOfElementLocated(By locator)
invisibilityOfElementLocated(By locator)
attributeContains(WebElement element, String attribute, String value)
alertIsPresent()

Write the code to double-click an element.
Code to double-click an element-

Actions action = new Actions(driver);
WebElement element=driver.findElement(By.id("elementId"));
action.doubleClick(element).perform();

How to mouse hover an element in Selenium?
Code to mouse hover over an element-

Actions action = new Actions(driver);
WebElement element=driver.findElement(By.id("elementId"));
action.moveToElement(element).perform();

How to fetch the current page URL in Selenium?
In order to fetch the current page URL, we can use the getCurrentURL() command.

driver.getCurrentUrl();

How can we fetch the title of the page in Selenium?
Using driver.getTitle() command, we can fetch the page title in Selenium. This method returns a string containing the title of the webpage.

How can we find all the links on a web page?
All the links are of anchor tag ‘a’. So by locating elements of tagName ‘a’ we can find all the links on a webpage.

List<WebElement> links = driver.findElements(By.tagName("a"));



What are some commonly encountered exceptions in Selenium?
Some of the commonly seen exceptions in Selenium are-

NoSuchElementException – When no element can be located by the locator provided.
ElementNotVisibleException – When an element is present in the DOM but is not visible.
NoAlertPresentException – When we try to switch to an alert box but the targetted alert is not present.
NoSuchFrameException – When we try to switch to a frame but the targetted frame is not present.
NoSuchWindowException – When we try to switch to a window but the targetted window is not present.


How to handle dropdowns in Selenium?
Using Select class-

Select countriesDropDown = new Select(driver.findElement(By.id("countries")));
dropdown.selectByVisibleText("India");
//or using index of the option starting from 0
dropdown.selectByIndex(1);
//or using its value attribute
dropdown.selectByValue("Ind");

How can we check if an element is getting displayed on a web page?
Using the isDisplayed() method we can check if an element is getting displayed on a web page.

driver.findElement(By locator).isDisplayed();

What is the difference between driver.findElement() and driver.findElements() commands?
The difference between driver.findElement() and driver.findElements() commands are-

findElement() returns a single WebElement (found first) based on the locator passed as a parameter. Whereas findElements() returns a list of WebElements, all satisfying the locator value passed.

Syntax of findElement()-
WebElement textbox = driver.findElement(By.id(“textBoxLocator”));

Whereas the syntax of findElements()-
List <WebElement> elements = driver.findElements(By.id(“value”));


 How to handle the HTTPS website in Selenium or how to accept the SSL untrusted connection?
Using profiles, we can handle accepting the SSL untrusted connection certificate. Profiles are basically a set of user preferences stored in a file.

FirefoxProfile profile = new FirefoxProfile();
profile.setAcceptUntrustedCertificates(true); 
profile.setAssumeUntrustedCertificateIssuer(false);
WebDriver driver = new FirefoxDriver(profile); 

How to do drag and drop in Selenium?
Using the Action class, drag and drop can be performed in Selenium. Sample code-

Actions builder = new Actions(driver);
Action dragAndDrop = builder.clickAndHold(SourceElement)
.moveToElement(TargetElement)
.release(TargetElement)
.build();
dragAndDrop.perform();

How to execute JavaScript code in Selenium?
JavaScript code can be executed in Selenium using JavaScriptExecuter. Sample code for javascript execution-

WebDriver driver = new FireFoxDriver();
if (driver instanceof JavascriptExecutor) {
 ((JavascriptExecutor)driver).executeScript("{JavaScriptCode}");
}

What is Page Object Model or POM?
Page Object Model (POM) is a design pattern in Selenium. A design pattern is a solution or a set of standards that are used for solving commonly occurring software problems.

Now coming to POM – POM helps to create a framework for maintaining selenium scripts. In POM for each page of the application, a class is created having the web elements belonging to the page and methods handling the events on that page. The test scripts are maintained in separate files and the methods of the page object files are called from the test scripts file.

In this way, we can create a robust automation framework using POM.


What are the advantages of POM?
The advantages are POM are-

Using POM, we can create an Object Repository i.e. a set of web elements in separate files along with their associated functions. In this way, keeping the code clean.
For any change in UI(or web elements), only page object files are required to be updated leaving test files unchanged.
It makes code reusable as well as maintainable.



What is Page Factory?
Page factory is an implementation of the Page Object Model in Selenium. It provides @FindBy annotation to find web elements. In addition, there is a PageFactory.initElements() method to initialize all web elements defined with @FindBy annotation.

public class SamplePage {
    WebDriver driver;
    @FindBy(id="search")
    WebElement searchTextBox;
   
    @FindBy(name="searchBtn")
    WebElement searchButton;
    //Constructor
    public samplePage(WebDriver driver){
        this.driver = driver;
        //initElements method to initialize all elements
        PageFactory.initElements(driver, this);
    }
    
    //Sample method
    public void search(String searchTerm){
        searchTextBox.sendKeys(searchTerm);  
        searchButton.click();
    }
}



What is an Object repository?
An object repository is the centralized location of all the objects or WebElements of the test scripts. In Selenium, we can implement an object repository using the Page Object Model as well as Page Factory design patterns.

What is a data-driven framework?
A data-driven framework is one in which the test data is put in external files like CSV, Excel, etc. Basically, the test data is separated from the test logic that is written in test script files. The test data drives the test cases, i.e. the test methods run for each set of test data values.

TestNG provides inherent support for data-driven testing using @dataProvider annotation.

What is a keyword-driven framework?
A keyword-driven framework is one in which we associate the normal set of actions with keywords and keep them in an external file usually in tabular form.

For example, we can use-

launchBrowser() keyword, for the action of launching a browser.
writeInTextBox(webElement, textToWrite) keyword, for the action to write in a textbox with keyword, etc.
The framework contains the code to perform the action based on a keyword specified in the external file.

In this way, a person of a non-programming background can also write the test steps in a file as long as all the keywords are present in the framework along with the implementation.


What is Selenium Grid?
Selenium Grid is a tool that helps in distributed testing. Using Grid, we can run test scripts in different machines having different browsers, browser versions, platforms, etc in parallel. In the Selenium grid, there is a hub that is a central server managing all the distributed machines known as nodes.

What are some advantages of the Selenium grid?
The advantages of the Selenium grid are-

It allows running test cases in parallel thereby saving test execution time.
Multi-browser testing is possible using the Selenium grid by running the test on machines having different browsers.

Explain the line of code Webdriver driver = new FirefoxDriver();.
This is one of the most frequently asked Selenium interview questions. In the line of code Webdriver driver = new FirefoxDriver(); ‘WebDriver’ is an interface and we are creating an object of type WebDriver instantiating an object of FirefoxDriver class.

What is the purpose of creating a reference variable- ‘driver’ of type WebDriver instead of directly creating a FireFoxDriver object or any other driver’s reference in the statement Webdriver driver = new FirefoxDriver();?
By creating a reference variable of type WebDriver, we can use the same variable to work with multiple browsers like ChromeDriver, IEDriver, etc.


Name an API used for reading and writing data to Excel files.
Apache POI API and JXL(Java Excel API) can be used for reading, writing, and updating Excel files.



Name an API used for logging in Java.
Log4j is an open-source API widely used for logging in Java. It supports multiple levels of logging like – ALL, DEBUG, INFO, WARN, ERROR, TRACE, and FATAL.

What is the use of logging in automation?
Logging helps in debugging the tests when required and also provides storage of the test’s runtime behavior.


What are commonly used TestNG annotations?
The commonly used TestNG annotations are-

@Test – The @Test annotation marks a method as a test method.
@BeforeSuite – The annotated method will run only once before all tests in this suite have run.
@AfterSuite -The annotated method will run only once after all tests in this suite have run.
@BeforeClass – The annotated method will run only once before the first test method in the current class is invoked.
@AfterClass – The annotated method will run only once after all the test methods in the current class have been run.
@BeforeTest – The annotated method will run before any test method belonging to the classes inside the <test> tag is run.



What is the use of the testng.xml file?
A testng.xml file is used for configuring the whole test suite. In this file, we can create a test suite, create test groups, mark tests for parallel execution, add listeners, and pass parameters to test scripts. Later, this testng.xml file can be used for triggering the test suite.


How can we create a data-driven framework using TestNG?
Using @DataProvider we can create a data-driven framework. Basically, we can pass test data to the associated test method and then multiple iterations of the test run for the different test data values passed from the @DataProvider method. The method annotated with @DataProvider annotation return a 2D array of object.

//Data provider returning 2D array of 3*2 matrix
 @DataProvider(name = "dataProvider1")
   public Object[][] dataProviderMethod1() {
      return new Object[][] {{"kuldeep","rana"}, {"k1","r1"},{"k2","r2"}};
   }
   //This method is bound to the above data provider returning 2D array of 3*2 matrix
   //The test case will run 3 times with different set of values
   @Test(dataProvider = "dataProvider1")
   public void sampleTest(String s1, String s2) {
      System.out.println(s1 + " " + s2);
   }
   
   
How can we make one test method dependent on others using TestNG?
Using the ‘dependsOnMethods’ parameter inside @Test annotation in TestNG, we can make one test method run only after the successful execution of the dependent test method.

 @Test(dependsOnMethods = { "preTests" })


How do you handle dynamic elements in Selenium WebDriver?
During automation, many times we face situations in which the application to be automated has certain elements whose locators are dynamic or in other way not known beforehand. These elements change their attributes, IDs, or positions in the DOM during runtime. To effectively handle these elements, we can use the following strategies-

1. Using XPath or CssSelector with Contains–
We can use XPath or CSS selectors with the “contains” function to locate elements based on partial attribute values that remain constant. For instance, if an element’s ID contains a dynamic number, we can use-

WebElement dynamicElement = 
driver.findElement(By.xpath("//input[contains(@id, 'partialId that is static')]"));
2. Using parent elements–
Sometimes, we can locate a stable parent element and then navigate to the dynamic element within it.

WebElement parentElement = 
driver.findElement(By.id("staticParentElementId"));
WebElement dynamicElement = 
parentElement.findElement(By.tagName("button"));

In case of web elements that appear with some delay on the web page, we can use different waits like – implicit wait, explicit wait (preferred as it has waits based on different expected conditions) and fluent wait.


How do you handle SSL certificate errors in Selenium?
We can bypass SSL certificate errors by creating a custom ChromeOptions object and setting the --ignore-certificate-errors flag.

Explain the concept of headless browsers in Selenium. In what situation can we use headless browsers?
Headless browsers (e.g., Headless Chrome) offer faster test execution, lower resource consumption, and provide the ability to run tests on servers without a graphical interface. They are suitable for automated testing, web scraping, and continuous integration environments where GUI rendering is unnecessary.

Can you discuss the best practices for writing maintainable and robust Selenium automation scripts?
Best practices for writing robust test scripts include using a design pattern like – Page Object Model, implementing proper waits, keeping test data separate from test logic, using meaningful test case names, and regularly refactoring code to maintain readability and reliability.


How do you handle synchronization issues in Selenium when dealing with asynchronous web applications?
Asynchronous web applications can be challenging to automate due to delayed element loading. We can use explicit waits, ExpectedConditions, and custom wait conditions to handle synchronization issues. You may need to wait for elements to become clickable, visible, or have specific attributes/values before interacting with them.


Explain how you would handle cross-browser testing using Selenium. What challenges can arise in this context?
Cross-browser testing involves running tests on different browsers (e.g., Chrome, Firefox, Safari, Edge, etc) to ensure browser compatibility. Selenium Grid and WebDriver’s support for multiple browser drivers helps in cross-browser testing.

The challenges in cross-browser testing include –

Browser Diversity – Different browsers have distinct rendering engines (e.g., Chrome’s Blink, Firefox’s Gecko, Safari’s WebKit), leading to variations in how they display web content. At times, we have to write browser-specific code to handle different web elements.
Browser Versions – Each browser frequently releases new versions with updates and improvements. So, we have to make sure that the test scripts work fine with the new version while also supporting the older versions.
Platform Differences – Browsers may behave differently on different operating systems (Windows, macOS, Linux). Cross-browser testing should account for these platform variations to ensure a seamless experience for all users.



What are the significant changes/upgrades in various Selenium versions?
Selenium v1.0:

Version 1.0 was the initial release of Selenium.
It included three tools: Selenium IDE, Selenium RC, and Selenium Grid.
Selenium v2.0:

Selenium WebDriver was introduced replacing Selenium RC in version "2.0".
With the onset of WebDriver, RC got deprecated and moved to the legacy package.
Selenium v3:

The latest release Selenium 3 has new added features and functionalities.
It includes Selenium IDE, Selenium WebDriver, and Selenium Grid.

List some of the test types that are supported by Selenium.
Different types of testing's that we can achieve through Selenium are.

Functional Testing
Regression Testing
Sanity Testing
Smoke Testing
Responsive Testing
Cross Browser Testing
UI testing (black box)
Integration Testing

What is the difference between findElement() and findElements()?
findElement(): It is used to find the first element within the current page using the given "locating mechanism". It returns a single WebElement.

findElements(): It uses the given "locating mechanism" to find all the elements within the current page. It returns a list of web elements.


What is the wait? How many types of waits in selenium?
Selenium Webdriver introduces the concept of waits for the AJAX-based application. There are two types of waits:

Implicit Wait
Explicit Wait


Write a code snippet to launch Internet Explorer browser in WebDriver.
public class IEBrowserLaunchDemo {  
  
public static void main(String[] args) {  
  
//Creating a driver object referencing WebDriver interface  
WebDriver driver;  
  
//Setting the webdriver.ie.driver property to its executable's location  
System.setProperty("webdriver.ie.driver", "/lib/IEDriverServer/IEDriverServer.exe");  
      
//Instantiating driver object  
driver = newInternetExplorerDriver();  
  
//Using get() method to open a webpage  
driver.get("http://javatpoint.com");  
  
//Closing the browser  
driver.quit();  
  
    }  
  
}  


Write a code snippet to perform right-click an element in WebDriver.
We will use Action class to generate user event like right-click an element in WebDriver.

Actions action = newActions(driver);  
WebElement element = driver.findElement(By.id("elementId"));  
action.contextClick(element).perform();  

How to capture screenshot in WebDriver?
Below is the program to capture screenshot in WebDriver.

import org.junit.After;  
import org.junit.Before;  
import org.junit.Test;  
import java.io.File;  
import java.io.IOException;  
import org.apache.commons.io.FileUtils;  
import org.openqa.selenium.OutputType;  
import org.openqa.selenium.TakesScreenshot;  
import org.openqa.selenium.WebDriver;  
import org.openqa.selenium.firefox.FirefoxDriver;  
  
public class TakeScreenshot {  
WebDriver drv;  
@Before  
public void setUp() throws Exception {  
driver = new FirefoxDriver();  
drv.get("https://google.com");  
}  
@After  
public void tearDown() throws Exception {  
drv.quit();  
}  
  
@Test  
public void test() throws IOException {  
//capture the screenshot  
File scrFile = ((TakeScreenshot)drv).getScreenshotAs(OutputType.FILE);  
// paste the screenshot in the desired location  
FileUtils.copyFile(scrFile, new File("C:\\Screenshot\\Scr.jpg"))  
}  
}  














 


























































